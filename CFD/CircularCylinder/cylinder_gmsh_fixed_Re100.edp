///////////////////////////////////////////////////////////////////////
//
// A CFD solver based on FEM for unsteady incompressible Navier-Stokes
//
// Case  : Flow past a fixed circular cylinder for Re=100
//
// Author: Dr Chennakesava Kadapa
// Date  : 02-Dec-2022
//
///////////////////////////////////////////////////////////////////////

load "gmsh"
load "iovtk"

// Parameters

real rho = 1.0;   // fluid density
real  mu = 0.01;  // fluid viscosity
real eps = 1e-8;  // tolerance

real Re  = 100.0; // Reynolds number
real dt  = 0.1;   // Time step size

real inletVeloX = Re*mu/rho;
real inletVeloY = 0.0;

// load the mesh file
mesh Th = gmshload("cylinder-gmsh1.msh");

// define labels for boundaries
int inlet       = 1;
int outlet      = 2;
int topwall     = 3;
int bottomwall  = 4;
int cylinder    = 5;


// FE space for velocity
fespace Xh(Th, P2);
Xh fluidVeloX, fluidVeloY;
Xh vX, vY; // test functions
Xh fluidVeloXp,fluidVeloYp;
Xh fluidAcceX, fluidAcceY, fluidAcceXp,fluidAcceYp;
Xh vorticityZ;

// FE space for pressure
fespace Mh(Th,P1);
Mh fluidPres;
Mh q; // test function
Mh fluidPresp;

// Macros
macro Grad(fluidVeloX,fluidVeloY) [dx(fluidVeloX), dy(fluidVeloX), dx(fluidVeloY), dy(fluidVeloY)] //
macro UgradV(fluidVeloX,fluidVeloY,vX,vY) [[fluidVeloX,fluidVeloY]'*[dx(vX),dy(vX)],
                        [fluidVeloX,fluidVeloY]'*[dx(vY),dy(vY)]] //
macro div(fluidVeloX,fluidVeloY) (dx(fluidVeloX) + dy(fluidVeloY)) //


// Initialization
fluidVeloX = inletVeloX;
fluidVeloY = inletVeloY;
fluidPres  = 0.0;

fluidVeloXp = fluidVeloX;
fluidVeloYp = fluidVeloY;
fluidPresp  = fluidPres;


// Time integration parameters
real rhoInf = 0.0;
real af = 1.0/(1.0+rhoInf);
real am = 0.5*(3.0-rhoInf)/(1.0+rhoInf);
real gamma = 0.5+am-af;

real acceFact1 = am/(gamma*dt);
real acceFact2 = (gamma-am)/gamma;

real[int]  td = [0.0, 0.0, 0.0, 0.0];
td[0] = 1.0/gamma/dt;
td[1] = (gamma-1.0)/gamma;

// some auxiliary variables
int[int] Order = [1];

int timestep;
real err=0;
real loadfactor=0.0;
real timeNow = 0.0, forceX, forceY;


// open the file for writing forces
ofstream forcesfile("cylinder-fixed-output.dat");
forcesfile.precision(16);

forcesfile << timeNow << "\t" << forceX << "\t" << forceY << endl;
forcesfile.flush;

// Time loop
for (timestep = 1; timestep <= 3000; timestep++)
{
    timeNow += dt;

    cout << " Timestep       =  "  << timestep << endl;
    cout << " Current time   =  "  << timeNow  << endl;
    cout << endl;

    loadfactor = 1.0;
    //if(timeNow > 1.0)      loadfactor = 1.0;

    //
    // Solve the fluid problem at t_{n+1}
    solve NSChenna ([fluidVeloX, fluidVeloY, fluidPres], [vX, vY, q])
        = int2d(Th)(
            rho*acceFact1 * ( [fluidVeloX,fluidVeloY]' * [vX,vY] )
            + mu * (Grad(fluidVeloX,fluidVeloY)' * Grad(vX,vY))
            + [fluidVeloXp*dx(fluidVeloX)+fluidVeloYp*dy(fluidVeloX), fluidVeloXp*dx(fluidVeloY)+fluidVeloYp*dy(fluidVeloY) ]' * [vX,vY]
            + [fluidVeloX*dx(fluidVeloXp)+fluidVeloY*dy(fluidVeloXp), fluidVeloX*dx(fluidVeloYp)+fluidVeloY*dy(fluidVeloYp) ]' * [vX,vY]
            - div(fluidVeloX,fluidVeloY) * q
            - div(vX,vY) * fluidPres
            - 1e-8*fluidPres*q //stabilization term
        )
        - int2d(Th) (
            + rho*acceFact1 * ( [fluidVeloXp,fluidVeloYp]' * [vX,vY] )
            - rho*acceFact2 * ( [fluidAcceXp,fluidAcceYp]' * [vX,vY] )
            + [fluidVeloXp*dx(fluidVeloXp)+fluidVeloYp*dy(fluidVeloXp), fluidVeloXp*dx(fluidVeloYp)+fluidVeloYp*dy(fluidVeloYp) ]' * [vX,vY]
        )
        + on(inlet, fluidVeloX=loadfactor*inletVeloX, fluidVeloY=0)
        + on(topwall, fluidVeloY=0)
        + on(bottomwall, fluidVeloY=0)
        + on(cylinder, fluidVeloX=0.0, fluidVeloY=0)
        ;

    //
    // compute acceleration
    fluidAcceX = td[0]*(fluidVeloX-fluidVeloXp) + td[1]*fluidAcceXp;
    fluidAcceY = td[0]*(fluidVeloY-fluidVeloYp) + td[1]*fluidAcceYp;

    // save variables
    fluidVeloXp = fluidVeloX;
    fluidVeloYp = fluidVeloY;
    fluidPresp  = fluidPres;

    fluidAcceXp = fluidAcceX;
    fluidAcceYp = fluidAcceY;

    //
    // calculate forces and write to file
    forceX = int1d(Th, cylinder)((mu*dx(fluidVeloX)-fluidPres)*N.x+(mu*dy(fluidVeloX))*N.y);
    forceY = int1d(Th, cylinder)((mu*dx(fluidVeloY))*N.x+(mu*dy(fluidVeloY)-fluidPres)*N.y);

    forcesfile << timeNow << "\t" << forceX << "\t" << forceY << endl;
    forcesfile.flush;

    //
    // write output in VTK format
    string filename = "cylinder-fixed-velocity-" + string(timestep) + ".vtu";
    savevtk(filename, Th, [fluidVeloX, fluidVeloY, 0], dataname="velo", order=Order);

    filename = "cylinder-fixed-pressure-" + string(timestep) + ".vtu";
    savevtk(filename, Th, fluidPres,  dataname="pres", order=Order);

    //solve vort (vorticityZ, vX)
    //    = int2d(Th)(
    //        vorticityZ*vX
    //    )
    //    - int2d(Th)(
    //        ( dx(fluidVeloY)-dy(fluidVeloX) )*vX
    //    );
    //
    //filename = "cylinder-fixed-vorticity-" + string(timestep) + ".vtu";
    //savevtk(filename, Th, vorticityZ, dataname="vortz", order=Order);
    cout << endl;
}
